{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../services/authentication.service\";\nexport class AuthenticationGuard {\n  constructor(router, authenticationService) {\n    this.router = router;\n    this.authenticationService = authenticationService;\n  }\n  canActivate(route, state) {\n    console.log(this.authenticationService.isAuthenticated());\n    if (this.authenticationService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['']);\n      return false;\n    }\n  }\n}\nAuthenticationGuard.ɵfac = function AuthenticationGuard_Factory(t) {\n  return new (t || AuthenticationGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n};\nAuthenticationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationGuard,\n  factory: AuthenticationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthenticationGuard","constructor","router","authenticationService","canActivate","route","state","console","log","isAuthenticated","navigate","i0","ɵɵinject","i1","Router","i2","AuthenticationService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\21651\\Downloads\\GeoTrackr-developFront\\GeoTrackr-developFront\\src\\app\\core\\guards\\authentication.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthenticationService} from \"../../../services/authentication.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private  router:Router, private authenticationService: AuthenticationService) {\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    console.log(this.authenticationService.isAuthenticated())\n    if(this.authenticationService.isAuthenticated()){\n      return  true\n    }else{\n      this.router.navigate(['']);\n      return  false\n    }\n  }\n\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,mBAAmB;EAC9BC,YAAqBC,MAAa,EAAUC,qBAA4C;IAAnE,KAAAD,MAAM,GAANA,MAAM;IAAiB,KAAAC,qBAAqB,GAArBA,qBAAqB;EAEjE;EAEAC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAC1BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,qBAAqB,CAACM,eAAe,EAAE,CAAC;IACzD,IAAG,IAAI,CAACN,qBAAqB,CAACM,eAAe,EAAE,EAAC;MAC9C,OAAQ,IAAI;KACb,MAAI;MACH,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1B,OAAQ,KAAK;;EAEjB;;AAfWV,mBAAmB,C;mBAAnBA,mBAAmB,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,qBAAA;AAAA;AAAnBhB,mBAAmB,C;SAAnBA,mBAAmB;EAAAiB,OAAA,EAAnBjB,mBAAmB,CAAAkB,IAAA;EAAAC,UAAA,EAFlB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}