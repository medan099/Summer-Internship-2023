{"ast":null,"code":"import { environment } from \"../environments/environment\";\nimport { tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport const API_URL = environment.apiUrl;\nexport const AUTH_URL = environment.loginUrl;\nexport const DEFAULT_SIZE = 10;\nexport class AuthenticationService {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.USER_DATA = 'userData';\n  }\n  resetPassword(email) {\n    // Create the request body with the email\n    const requestBody = {\n      email: email\n    };\n    return this.httpClient.post(`${API_URL}/resetPassword`, requestBody);\n  }\n  myRole() {\n    const data = localStorage.getItem('userData');\n    if (data) {\n      let dataJson = JSON.parse(data);\n      console.log(dataJson[\"user\"].role);\n    }\n  }\n  login(data) {\n    return this.httpClient.post(AUTH_URL, data).pipe(tap(data => {\n      this.userData = data;\n      console.log(data);\n      localStorage.clear();\n      localStorage.setItem(this.USER_DATA, JSON.stringify(data));\n      let tokenStr = \"Bearer \" + this.userData.token;\n      sessionStorage.setItem(\"token\", tokenStr);\n    }));\n  }\n  getToken() {\n    const data = localStorage.getItem('userData');\n    if (data) {\n      return JSON.parse(data)[\"token\"];\n    }\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem(this.USER_DATA);\n  }\n  logout() {\n    localStorage.clear();\n    this.router.navigate(['../']);\n  }\n  myName() {\n    const data = localStorage.getItem('userData');\n    if (data) {\n      let dataJson = JSON.parse(data);\n      return dataJson[\"user\"].nom;\n    }\n  }\n  myPrenom() {\n    const data = localStorage.getItem('userData');\n    if (data) {\n      let dataJson = JSON.parse(data);\n      return dataJson[\"user\"].prenom;\n    }\n  }\n  getUserData() {\n    const data = localStorage.getItem('userData');\n    if (data) {\n      return JSON.parse(data)[\"user\"];\n    }\n  }\n  static handleError(error) {\n    const err = new Error('error');\n    return throwError(err);\n  }\n  getUserByEmail(email) {\n    return this.httpClient.get(`${API_URL}/user/byEmail?email=${email}`);\n  }\n  changePass(data) {\n    return this.httpClient.post(`${API_URL}/changePass`, data);\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","tap","throwError","API_URL","apiUrl","AUTH_URL","loginUrl","DEFAULT_SIZE","AuthenticationService","constructor","httpClient","router","USER_DATA","resetPassword","email","requestBody","post","myRole","data","localStorage","getItem","dataJson","JSON","parse","console","log","role","login","pipe","userData","clear","setItem","stringify","tokenStr","token","sessionStorage","getToken","isAuthenticated","logout","navigate","myName","nom","myPrenom","prenom","getUserData","handleError","error","err","Error","getUserByEmail","get","changePass","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\21651\\Desktop\\projet-talan\\projet-talan\\GeoTrackr-developFront\\src\\services\\authentication.service.ts"],"sourcesContent":["// authentication.service.ts\nimport { Injectable } from '@angular/core';\nimport { environment } from \"../environments/environment\";\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport {User} from \"../models/User\";\nexport const API_URL=environment.apiUrl\nimport { BehaviorSubject, catchError, Observable, of, tap, throwError } from \"rxjs\";\n\nexport const AUTH_URL = environment.loginUrl;\nexport const DEFAULT_SIZE = 10\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  userData!: User;\n  USER_DATA = 'userData';\n  constructor(\n    private httpClient: HttpClient,\n\n    private router: Router\n  ) {}\n  resetPassword(email: string) {\n    // Create the request body with the email\n    const requestBody = {\n      email: email\n    }\n    return this.httpClient.post<string>(`${API_URL}/resetPassword`, requestBody);}\n\n  myRole(){\n   const data=localStorage.getItem('userData');\n    if (data) {\n      let dataJson = JSON.parse(data);\n      console.log(dataJson[\"user\"].role)\n    }\n  }\n\n  login(data: any){\n\n    return this.httpClient.post<User>(<string>AUTH_URL, data).pipe(\n      tap((data: User) => {\n        this.userData = data;\n        console.log(data);\n        localStorage.clear();\n        localStorage.setItem(this.USER_DATA, JSON.stringify(data));\n\n\n        let tokenStr = \"Bearer \" + this.userData.token;\n        sessionStorage.setItem(\"token\", tokenStr);\n      }),\n\n    );\n  }\n\n  getToken() {\n  const data=localStorage.getItem('userData');\n  if(data){\n    return JSON.parse(data)[\"token\"]\n  }\n  }\n\n  isAuthenticated() {\n    return !!localStorage.getItem(this.USER_DATA);\n  }\n\n  logout(){\n    localStorage.clear();\n    this.router.navigate(['../'])\n  }\n\n  myName(){\n    const data=localStorage.getItem('userData');\n    if (data) {\n      let dataJson = JSON.parse(data);\n      return dataJson[\"user\"].nom\n\n    }\n  }\n\n  myPrenom(){\n    const data=localStorage.getItem('userData');\n    if (data) {\n      let dataJson = JSON.parse(data);\n      return dataJson[\"user\"].prenom\n    }\n  }\n\n  getUserData() {\n    const data= localStorage.getItem('userData');\n    if(data){\n      return JSON.parse(data)[\"user\"];\n    }\n  }\n\n  private static handleError(error: HttpErrorResponse) {\n    const err = new Error('error');\n    return throwError(err);\n  }\n\n  getUserByEmail(email:any):Observable<any>{\n    return this.httpClient.get<User>(`${API_URL}/user/byEmail?email=${email}`)\n  }\n\n  changePass(data: any): Observable<string> {\n    return this.httpClient.post<string>(`${API_URL}/changePass`, data);\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,6BAA6B;AAKzD,SAAsDC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;;AADnF,OAAO,MAAMC,OAAO,GAACH,WAAW,CAACI,MAAM;AAGvC,OAAO,MAAMC,QAAQ,GAAGL,WAAW,CAACM,QAAQ;AAC5C,OAAO,MAAMC,YAAY,GAAG,EAAE;AAK9B,OAAM,MAAOC,qBAAqB;EAIhCC,YACUC,UAAsB,EAEtBC,MAAc;IAFd,KAAAD,UAAU,GAAVA,UAAU;IAEV,KAAAC,MAAM,GAANA,MAAM;IAJhB,KAAAC,SAAS,GAAG,UAAU;EAKnB;EACHC,aAAaA,CAACC,KAAa;IACzB;IACA,MAAMC,WAAW,GAAG;MAClBD,KAAK,EAAEA;KACR;IACD,OAAO,IAAI,CAACJ,UAAU,CAACM,IAAI,CAAS,GAAGb,OAAO,gBAAgB,EAAEY,WAAW,CAAC;EAAC;EAE/EE,MAAMA,CAAA;IACL,MAAMC,IAAI,GAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC1C,IAAIF,IAAI,EAAE;MACR,IAAIG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;MAC/BM,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,MAAM,CAAC,CAACK,IAAI,CAAC;;EAEtC;EAEAC,KAAKA,CAACT,IAAS;IAEb,OAAO,IAAI,CAACR,UAAU,CAACM,IAAI,CAAeX,QAAQ,EAAEa,IAAI,CAAC,CAACU,IAAI,CAC5D3B,GAAG,CAAEiB,IAAU,IAAI;MACjB,IAAI,CAACW,QAAQ,GAAGX,IAAI;MACpBM,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;MACjBC,YAAY,CAACW,KAAK,EAAE;MACpBX,YAAY,CAACY,OAAO,CAAC,IAAI,CAACnB,SAAS,EAAEU,IAAI,CAACU,SAAS,CAACd,IAAI,CAAC,CAAC;MAG1D,IAAIe,QAAQ,GAAG,SAAS,GAAG,IAAI,CAACJ,QAAQ,CAACK,KAAK;MAC9CC,cAAc,CAACJ,OAAO,CAAC,OAAO,EAAEE,QAAQ,CAAC;IAC3C,CAAC,CAAC,CAEH;EACH;EAEAG,QAAQA,CAAA;IACR,MAAMlB,IAAI,GAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC3C,IAAGF,IAAI,EAAC;MACN,OAAOI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAC,OAAO,CAAC;;EAElC;EAEAmB,eAAeA,CAAA;IACb,OAAO,CAAC,CAAClB,YAAY,CAACC,OAAO,CAAC,IAAI,CAACR,SAAS,CAAC;EAC/C;EAEA0B,MAAMA,CAAA;IACJnB,YAAY,CAACW,KAAK,EAAE;IACpB,IAAI,CAACnB,MAAM,CAAC4B,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;EAC/B;EAEAC,MAAMA,CAAA;IACJ,MAAMtB,IAAI,GAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC3C,IAAIF,IAAI,EAAE;MACR,IAAIG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;MAC/B,OAAOG,QAAQ,CAAC,MAAM,CAAC,CAACoB,GAAG;;EAG/B;EAEAC,QAAQA,CAAA;IACN,MAAMxB,IAAI,GAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC3C,IAAIF,IAAI,EAAE;MACR,IAAIG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;MAC/B,OAAOG,QAAQ,CAAC,MAAM,CAAC,CAACsB,MAAM;;EAElC;EAEAC,WAAWA,CAAA;IACT,MAAM1B,IAAI,GAAEC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC5C,IAAGF,IAAI,EAAC;MACN,OAAOI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAC,MAAM,CAAC;;EAEnC;EAEQ,OAAO2B,WAAWA,CAACC,KAAwB;IACjD,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,OAAO,CAAC;IAC9B,OAAO9C,UAAU,CAAC6C,GAAG,CAAC;EACxB;EAEAE,cAAcA,CAACnC,KAAS;IACtB,OAAO,IAAI,CAACJ,UAAU,CAACwC,GAAG,CAAO,GAAG/C,OAAO,uBAAuBW,KAAK,EAAE,CAAC;EAC5E;EAEAqC,UAAUA,CAACjC,IAAS;IAClB,OAAO,IAAI,CAACR,UAAU,CAACM,IAAI,CAAS,GAAGb,OAAO,aAAa,EAAEe,IAAI,CAAC;EACpE;;AA5FWV,qBAAqB,C;mBAArBA,qBAAqB,EAAA4C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAArBjD,qBAAqB,C;SAArBA,qBAAqB;EAAAkD,OAAA,EAArBlD,qBAAqB,CAAAmD,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}