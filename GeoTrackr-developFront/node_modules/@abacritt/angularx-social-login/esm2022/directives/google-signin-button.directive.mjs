import { Directive, Input } from '@angular/core';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../socialauth.service";
class GoogleSigninButtonDirective {
    constructor(el, socialAuthService) {
        this.type = 'icon';
        this.size = 'medium';
        this.text = 'signin_with';
        this.shape = 'rectangular';
        this.theme = 'outline';
        this.logo_alignment = 'left';
        this.width = '';
        this.locale = '';
        socialAuthService.initState.pipe(take(1)).subscribe(() => {
            Promise.resolve(this.width).then((value) => {
                if (value > '400' || (value < '200' && value != '')) {
                    Promise.reject('Please note .. max-width 400 , min-width 200 ' +
                        '(https://developers.google.com/identity/gsi/web/tools/configurator)');
                }
                else {
                    google.accounts.id.renderButton(el.nativeElement, {
                        type: this.type,
                        size: this.size,
                        text: this.text,
                        width: this.width,
                        shape: this.shape,
                        theme: this.theme,
                        logo_alignment: this.logo_alignment,
                        locale: this.locale,
                    });
                }
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GoogleSigninButtonDirective, deps: [{ token: i0.ElementRef }, { token: i1.SocialAuthService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.0", type: GoogleSigninButtonDirective, selector: "asl-google-signin-button", inputs: { type: "type", size: "size", text: "text", shape: "shape", theme: "theme", logo_alignment: "logo_alignment", width: "width", locale: "locale" }, ngImport: i0 }); }
}
export { GoogleSigninButtonDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: GoogleSigninButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'asl-google-signin-button',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.SocialAuthService }]; }, propDecorators: { type: [{
                type: Input
            }], size: [{
                type: Input
            }], text: [{
                type: Input
            }], shape: [{
                type: Input
            }], theme: [{
                type: Input
            }], logo_alignment: [{
                type: Input
            }], width: [{
                type: Input
            }], locale: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLXNpZ25pbi1idXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9kaXJlY3RpdmVzL2dvb2dsZS1zaWduaW4tYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUd0QyxNQUlhLDJCQUEyQjtJQXlCdEMsWUFBWSxFQUFjLEVBQUUsaUJBQW9DO1FBdkJoRSxTQUFJLEdBQXdCLE1BQU0sQ0FBQztRQUduQyxTQUFJLEdBQWlDLFFBQVEsQ0FBQztRQUc5QyxTQUFJLEdBQW9ELGFBQWEsQ0FBQztRQUd0RSxVQUFLLEdBQWlELGFBQWEsQ0FBQztRQUdwRSxVQUFLLEdBQStDLFNBQVMsQ0FBQztRQUc5RCxtQkFBYyxHQUFzQixNQUFNLENBQUM7UUFHM0MsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUduQixXQUFNLEdBQVcsRUFBRSxDQUFDO1FBR2xCLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDekMsSUFBSSxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLEVBQUU7b0JBQ25ELE9BQU8sQ0FBQyxNQUFNLENBQ1osK0NBQStDO3dCQUM3QyxxRUFBcUUsQ0FDeEUsQ0FBQztpQkFDSDtxQkFBTTtvQkFDTCxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRTt3QkFDaEQsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO3dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTt3QkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7d0JBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO3dCQUNqQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7d0JBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSzt3QkFDakIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO3dCQUNuQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07cUJBQ3BCLENBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzhHQS9DVSwyQkFBMkI7a0dBQTNCLDJCQUEyQjs7U0FBM0IsMkJBQTJCOzJGQUEzQiwyQkFBMkI7a0JBSnZDLFNBQVM7bUJBQUM7b0JBQ1QsOERBQThEO29CQUM5RCxRQUFRLEVBQUUsMEJBQTBCO2lCQUNyQztpSUFHQyxJQUFJO3NCQURILEtBQUs7Z0JBSU4sSUFBSTtzQkFESCxLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSztnQkFJTixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sS0FBSztzQkFESixLQUFLO2dCQUlOLGNBQWM7c0JBRGIsS0FBSztnQkFJTixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sTUFBTTtzQkFETCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBTb2NpYWxBdXRoU2VydmljZSB9IGZyb20gJy4uL3NvY2lhbGF1dGguc2VydmljZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnYXNsLWdvb2dsZS1zaWduaW4tYnV0dG9uJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEdvb2dsZVNpZ25pbkJ1dHRvbkRpcmVjdGl2ZSB7XHJcbiAgQElucHV0KClcclxuICB0eXBlOiAnaWNvbicgfCAnc3RhbmRhcmQnID0gJ2ljb24nO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNpemU6ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZScgPSAnbWVkaXVtJztcclxuXHJcbiAgQElucHV0KClcclxuICB0ZXh0OiAnc2lnbmluX3dpdGgnIHwgJ3NpZ251cF93aXRoJyB8ICdjb250aW51ZV93aXRoJyA9ICdzaWduaW5fd2l0aCc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2hhcGU6ICdzcXVhcmUnIHwgJ2NpcmNsZScgfCAncGlsbCcgfCAncmVjdGFuZ3VsYXInID0gJ3JlY3Rhbmd1bGFyJztcclxuXHJcbiAgQElucHV0KClcclxuICB0aGVtZTogJ291dGxpbmUnIHwgJ2ZpbGxlZF9ibHVlJyB8ICdmaWxsZWRfYmxhY2snID0gJ291dGxpbmUnO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGxvZ29fYWxpZ25tZW50OiAnbGVmdCcgfCAnY2VudGVyJyA9ICdsZWZ0JztcclxuXHJcbiAgQElucHV0KClcclxuICB3aWR0aDogc3RyaW5nID0gJyc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbG9jYWxlOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHNvY2lhbEF1dGhTZXJ2aWNlOiBTb2NpYWxBdXRoU2VydmljZSkge1xyXG4gICAgc29jaWFsQXV0aFNlcnZpY2UuaW5pdFN0YXRlLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMud2lkdGgpLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID4gJzQwMCcgfHwgKHZhbHVlIDwgJzIwMCcgJiYgdmFsdWUgIT0gJycpKSB7XHJcbiAgICAgICAgICBQcm9taXNlLnJlamVjdChcclxuICAgICAgICAgICAgJ1BsZWFzZSBub3RlIC4uIG1heC13aWR0aCA0MDAgLCBtaW4td2lkdGggMjAwICcgK1xyXG4gICAgICAgICAgICAgICcoaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvZ3NpL3dlYi90b29scy9jb25maWd1cmF0b3IpJ1xyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZ29vZ2xlLmFjY291bnRzLmlkLnJlbmRlckJ1dHRvbihlbC5uYXRpdmVFbGVtZW50LCB7XHJcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgc2l6ZTogdGhpcy5zaXplLFxyXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQsXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxyXG4gICAgICAgICAgICBzaGFwZTogdGhpcy5zaGFwZSxcclxuICAgICAgICAgICAgdGhlbWU6IHRoaXMudGhlbWUsXHJcbiAgICAgICAgICAgIGxvZ29fYWxpZ25tZW50OiB0aGlzLmxvZ29fYWxpZ25tZW50LFxyXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=